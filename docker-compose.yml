networks:
  data-pipeline:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - data-pipeline

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - data-pipeline
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password123
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - data-pipeline
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio-init:
    image: minio/mc
    container_name: minio_init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set myminio http://minio:9000 admin password123;
      /usr/bin/mc mb myminio/iceberg-data --ignore-existing;
      /usr/bin/mc anonymous set public myminio/iceberg-data;
      echo 'MinIO bucket created successfully';
      exit 0;
      "
    networks:
      - data-pipeline

  jobmanager:
    image: flink:1.18.0-scala_2.12-java11
    container_name: flink_jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
    networks:
      - data-pipeline

  taskmanager:
    image: flink:1.18.0-scala_2.12-java11
    container_name: flink_taskmanager
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
    networks:
      - data-pipeline

  # ========================================
  # UNIFIED KAFKA PRODUCER (PostgreSQL + MS SQL)
  # ========================================
  kafka-producer:
    build:
      context: ./kafka-producer
    container_name: kafka_producer_unified
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      # Kafka config
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      
      # Enable/Disable sources
      ENABLE_POSTGRES: "true"
      ENABLE_MSSQL: "true"
      
      # PostgreSQL config
      PG_HOST: host.docker.internal
      PG_PORT: 5432
      PG_DATABASE: MDI
      PG_USER: postgres
      PG_PASSWORD: 12345
      
      # MS SQL Server config
      MSSQL_HOST: host.docker.internal
      MSSQL_PORT: 1433
      MSSQL_DATABASE: Mpass
      MSSQL_USER: mssql
      MSSQL_PASSWORD: 12345
      MSSQL_POLL_INTERVAL: 5
    networks:
      - data-pipeline
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # ========================================
  # FLINK PROCESSOR (Kafka -> Iceberg)
  # ========================================
  flink-processor:
    build:
      context: ./flink-processor
    container_name: flink_processor
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
      jobmanager:
        condition: service_started
      taskmanager:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      FLINK_JOBMANAGER_HOST: jobmanager
      FLINK_JOBMANAGER_PORT: 8081
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: admin
      S3_SECRET_KEY: password123
      ICEBERG_BUCKET: iceberg-data
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password123
      AWS_REGION: us-east-1
      AWS_S3_ENDPOINT: http://minio:9000
    volumes:
      - flink_data:/data
    restart: unless-stopped
    networks:
      - data-pipeline

volumes:
  flink_data:
  minio_data: